import sys

import rdflib as rl
from pytablewriter import MarkdownTableWriter

AUTO_LINE = "<!-- AUTOGENERATED - DO NOT EDIT BELOW THIS LINE -->"


def edit_properties(version):
    targetClasses = [
        "Protocol",
        "Activity",
        "Field",
        "AdditionalProperty",
        "OverrideProperty",
        "UnitOption",
        "ResponseOption",
        "Choice",
        "ComputeSpecification",
        "MessageSpecification",
        "AdditionalNoteObj",
        "ResponseActivity",
        "Response",
        "Participant",
        "SoftwareAgent",
    ]

    with open("docs/schema.md") as fp:
        doc = fp.readlines()
        for idx, line in enumerate(doc):
            if line.startswith(AUTO_LINE):
                break
        doc = doc[:idx]
    doc.append(AUTO_LINE)
    doc.append(
        """\n<!-- This section is generated by the Python script editProperties.py.
The script uses a released version of the schema to generate the properties. To
use this script first call:
python scripts/makeRelease.py <version>
python scripts/editProperties.py <version>
-->
"""
    )

    # read all the terms
    g = rl.Graph()
    g.parse(
        "https://raw.githubusercontent.com/schemaorg/schemaorg/main/data/releases/9.0/schema.ttl",
        format="turtle",
    )
    g.parse(f"releases/{version}/reproschema.ttl", format="turtle")
    g.parse(f"releases/{version}/reproschema-shacl.ttl", format="turtle")

    query = """PREFIX sh: <http://www.w3.org/ns/shacl#>
SELECT ?obj ?prop ?desc ?objdesc
WHERE {
   ?obj1 a sh:NodeShape;
       sh:property [ sh:path ?prop ];
       sh:targetClass ?obj .
   OPTIONAL { ?prop rdfs:comment ?desc .}
   OPTIONAL { ?obj rdfs:comment ?objdesc . }
}
"""
    results = list(g.query(query))

    objects = {k: {} for k in targetClasses}
    for res in results:
        s = g.compute_qname(res[0])
        p = g.compute_qname(res[1])
        if s[2] not in objects:
            raise ValueError(f"Unknown class: {s[2]}. Source: {res}")
        objects[s[2]][p] = str(res[2])
        objects[s[2]]["klass_desc"] = str(res[3])
    for klass, props in objects.items():
        writer = MarkdownTableWriter()
        writer.table_name = (
            f"{klass}\n"
            f"{props['klass_desc']}\n\n"
            f"**URI:** [http://schema.repronim.org/{klass}](http://schema.repronim.org/{klass})\n"
        )
        writer.headers = ["Name", "Description", "URI"]
        writer.value_matrix = []
        del props["klass_desc"]
        for val, comment in sorted(props.items()):
            property = [
                val[2],
                comment,
                f"[{val[1]}{val[2]}]({val[1]}{val[2]})",
            ]
            writer.value_matrix.append(property)
        writer.margin = 1  # add a whitespace for both sides of each cell
        doc.append("\n")
        doc.append("##" + writer.dumps())
    with open("docs/30_schema.md", "wt") as fp:
        fp.writelines(doc)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        version = "master"
    else:
        version = sys.argv[1]
    print(f"Generating classes and properties for version: {version}")
    edit_properties(version)
